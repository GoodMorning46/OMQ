import Foundation

class ImageGenerator {
    func generateImage(for meal: Meal, completion: @escaping (String?) -> Void) {
        let proteinList = meal.proteins.joined(separator: ", ")
        let starchyList = meal.starchies.joined(separator: ", ")
        let vegetableList = meal.vegetables.joined(separator: ", ")

        let prompt = """
        Un plat joyeux et app√©tissant, pr√©sent√© dans une assiette color√©e en c√©ramique sur une table en bois clair. Le repas est compos√© de \(proteinList), accompagn√© de \(starchyList) et de \(vegetableList). La sc√®ne est baign√©e d‚Äôune lumi√®re naturelle douce, avec des couleurs vives, des herbes fra√Æches, et un style convivial qui √©voque un d√©jeuner d‚Äô√©t√©. L‚Äôambiance est chaleureuse et inspir√©e des photos culinaires modernes sur Instagram.
        """
        print("üì§ Envoi de la requ√™te √† OpenAI avec le prompt : \(prompt)")

        guard let apiKey = Secrets.openAIKey else {
            print("‚ùå Erreur : cl√© API OpenAI manquante.")
            completion(nil)
            return
        }

        guard let url = URL(string: "https://api.openai.com/v1/images/generations") else {
            print("‚ùå Erreur : URL invalide.")
            completion(nil)
            return
        }

        let headers = [
            "Authorization": "Bearer \(apiKey)",
            "Content-Type": "application/json"
        ]

        let body: [String: Any] = [
            "model": "dall-e-3",
            "prompt": prompt,
            "n": 1,
            "size": "1024x1024"
        ]

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.allHTTPHeaderFields = headers
        request.httpBody = try? JSONSerialization.data(withJSONObject: body)

        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå Erreur requ√™te OpenAI : \(error.localizedDescription)")
                completion(nil)
                return
            }

            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå Erreur : r√©ponse HTTP invalide.")
                completion(nil)
                return
            }

            print("üì° Statut de la r√©ponse : \(httpResponse.statusCode)")

            guard let data = data else {
                print("‚ùå Erreur : pas de donn√©es re√ßues.")
                completion(nil)
                return
            }

            do {
                let decoded = try JSONDecoder().decode(OpenAIImageResponse.self, from: data)
                let imageURL = decoded.data.first?.url
                print("‚úÖ Image g√©n√©r√©e avec succ√®s : \(imageURL ?? "aucune URL")")
                completion(imageURL)
            } catch {
                print("‚ùå Erreur d√©codage JSON : \(error.localizedDescription)")
                completion(nil)
            }
        }.resume()
    }
}

struct OpenAIImageResponse: Codable {
    let data: [OpenAIImageData]
}

struct OpenAIImageData: Codable {
    let url: String
}
